#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)

# wget https://raw.githubusercontent.com/Bio312/lab4files/main/plotTreeAndDomains.r
# sudo /usr/local/bin/Rscript  --vanilla plotTreeAndDomains.r hox.bs.mid.suptree hox.rps-blast.out hox.domaintree.pdf

# test if there is at least one argument: if not, return an error
if (length(args)<3) {
  stop("You must provide a tree and then domain file and then output file.", call.=FALSE)
} 

#if (!require("BiocManager", quietly = TRUE))
#install.packages("BiocManager")
#BiocManager::install("drawProteins")

library(ggtree)
library(data.table)
library(drawProteins)
library(ggplot2)
library(patchwork)

tree <- read.tree(args[1]) #"hox.bs.mid.suptree"

#t <- ggtree(hoxt, aes(x, y)) + 
#geom_tree() + 
#theme_tree()  + 
#geom_tiplab(cex=0.9) + 
#geom_text2(size=2,aes(subset = !isTip, label=label))   + 
#ggplot2::xlim(0, 6) 

t <- ggtree(tree, aes(x, y)) + 
geom_tree() + 
theme_tree()  + 
geom_tiplab(size=2) + # adjust size of gene labels
geom_text2(size=2,aes(subset = !isTip, label=label))+
  xlim(0, max(tree$edge.length) + 1.5)  # Adds extra space on the right 

#ggplot2::xlim(0, max(6,0.389*(sum(hoxt$edge.length))-26.389 ))

#ggsave("plot.png",t)

torder <- data.frame("entryName" = get_taxa_name(t), "order" = length(get_taxa_name(t)):1)

dom_table <- fread(args[2]) #"hox.rps-blast.out"

rel_data0 <- dom_table[,c(1:4,6)]
colnames(rel_data0) <- c("V1","V2","V3","V4","V5")
rel_data0$type <- "DOMAIN"
reldatachain0 <- rel_data0[!(duplicated(rel_data0$V1)),]
reldatachain <- data.frame("V1"="","V2"=reldatachain0$V2,"V3"=1,"V4"=reldatachain0$V2,"V5"=reldatachain0$V1,"type"="CHAIN")

rel_data1 <- rbind(rel_data0,reldatachain)
rel_data2 <- as.data.frame(rel_data1[,c(6,5,3,4,2,1,1)])
rel_data2$taxid <- 1
colnames(rel_data2) <-  c( "type", "description", "begin","end","length","accession","entryName","taxid")
rel_data2$description <- sapply(rel_data2$description, function(dx) substr(dx, 1, 70))
rel_data3 <- merge(rel_data2,torder)

#draw_canvas(rel_data3) -> p

#p <- draw_chains(p, rel_data3,label_chains = FALSE)
p <- draw_canvas(rel_data3)  # Create a canvas for plotting

# Draw the gene chains first (this represents the full length of the gene)
p <- draw_chains(p, rel_data3, label_chains = TRUE) +  # Draw chains without specifying width
  theme_bw(base_size = 20) +  # white background
  theme(panel.grid.minor = element_blank(), 
        panel.grid.major = element_blank()) +
  theme(axis.ticks = element_blank(), 
        axis.text.y = element_blank()) +
  theme(panel.border = element_blank()) +
  theme(legend.text = element_text(size = 4)) +
  theme(legend.key.size = unit(0.15, 'cm')) +
  theme(axis.title.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.x = element_blank()) +
  theme(legend.title = element_blank()) +
  theme(plot.margin = unit(c(-5, 5, -5, -5), "mm")) +
  theme(legend.position = c(0, 0.1)) +
  labs(fill = "") +
  theme(panel.background = element_rect(fill = "transparent", colour = NA),
        plot.background = element_rect(fill = "transparent", colour = NA),
        legend.key = element_rect(fill = "transparent", colour = "transparent"),
        legend.background = element_rect(fill = "transparent"))

p <- draw_domains(p, rel_data3, label_domains = FALSE, label_size = 0.7, show.legend = TRUE)

#p <- draw_domains(p, rel_data3,label_domains = FALSE,label_size=0.7,show.legend=TRUE) + theme_bw(base_size = 20) + # white background
#    theme(panel.grid.minor=element_blank(), 
#        panel.grid.major=element_blank()) +
#    theme(axis.ticks = element_blank(), 
#        axis.text.y = element_blank()) +
#    theme(panel.border = element_blank())+
# theme(legend.text=element_text(size=4))+
#  theme(legend.key.size = unit(0.15, 'cm'))+
#    theme(axis.title.x=element_blank(),
#        axis.text.x=element_blank(),
#        axis.ticks.x=element_blank())+
#        theme(legend.title= element_blank())+
#     theme(plot.margin=unit(c(-5,5,-5,-5), "mm"))+
# theme(legend.position = c(0, 0.1)) +
#labs(fill="") +
#   theme(panel.background=element_rect(fill="transparent",colour=NA),
#      plot.background=element_rect(fill="transparent",colour=NA),
#      legend.key = element_rect(fill = "transparent", colour = "transparent"), 
#legend.background = element_rect(fill="transparent"))

pdf(args[3],paper="USr",width=10.5,height=7)
multiplot(t, p,ncol=2,widths=c(5,2))
dev.off()

print(paste0(args[3],", a pdf file, has been outputted"))
